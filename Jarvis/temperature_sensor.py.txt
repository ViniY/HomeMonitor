import time
import board
import adafruit_dht
import psutil


class Temperature:
    def __init__(self, temp=20, humi=50) -> None:
        self.temperature = temp
        self.humidity = humi

    def _update(self, temp, humi):
        self.temperature = temp
        self.humidity = humi
        self._check()

    # TODO Move this to automation and control the purifier
    def _check(self):
        if self.temperature >= 16 and self.temperature <= 25:
            print("Comfort Temperature")
        elif self.temperature < 16:
            print("Too cold")
        else:
            print("Too Hot")

        if self.humidity > 30 and self.humidity < 50:
            print("Ideal Humidity")
        elif self.humidity < 30:
            print("Too Dry")
        else:
            print("Too Wet")


# We first check if a libgpiod process is running. If yes, we kill it!
for proc in psutil.process_iter():
    if proc.name() == "libgpiod_pulsein" or proc.name() == "libgpiod_pulsei":
        proc.kill()
sensor = adafruit_dht.DHT11(board.D23)
room_condition = Temperature()

while True:
    try:
        temp = sensor.temperature
        humidity = sensor.humidity
        room_condition._update(temp, humidity)
        print("Temperature: {}*C   Humidity: {}% ".format(temp, humidity))

    except RuntimeError as error:
        print(error.args[0])
        time.sleep(2.0)
        continue
    except Exception as error:
        sensor.exit()
        raise error
    time.sleep(2.0)
